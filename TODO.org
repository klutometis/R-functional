* DONE Lazy currying
  CLOSED: [2012-11-12 Mon 00:16]
  This [[https://github.com/klutometis/R-functional/issues/1][issue]] from Jamie Folson.

  #+BEGIN_SRC R
    library(debug)
    
    Curry = function(FUN,...){
      .curried=as.list(match.call())[c(-1,-2)]
      debug(FUN, ..., .curried)
      function(...){
        .args=as.list(match.call())[-1]
        eval(substitute(do.call(FUN,c(.curried,.args))))
      }}
    
    harro <- function(a, b, c) c(a, b, c)
    harro.a <- Curry(harro, a=2)
    harro.b <- Curry(harro.a, b=3)
    harro.c <- Curry(harro.b, c=4)
    stopifnot(harro.c() == c(2, 3, 4))
  #+END_SRC
* TODO Trampoline
  some kind of tail-call-optimization abstraction
* TODO ForEach
** DONE R implementation
   CLOSED: [2010-03-31 Wed 13:07]
   - CLOSING NOTE [2010-03-31 Wed 13:07] \\
     we have one in the lisp package.
   we don't have tail-call optimization; is it a risk to recurse?
   #+BEGIN_SRC org
     ,- foreach = function(f, ...)
     ,  - args = list(...)
     ,  - if (!any(Map(is.null, list)))
     ,    - applicandum = Map(car, args)
     ,    - do.call(f, applicandum)
     ,    - do.call(for.each, Map(cdr, args))
   #+END_SRC

   #+BEGIN_SRC R
     library(lisp)
     library(RUnit)
     
     for.each <- function(f, ...) {
       args <- list(...)
       while (!do.call(any, Map(is.nil, args))) {
         applicanda <- Map(car, args)
         do.call(f, applicanda)
         args <- Map(cdr, args)
       }
     }
     
     checkEquals(capture.output(for.each(function(a, b) cat(a + b, ',', sep=''),
                                         list(1, 2),
                                         list(3, 4))),
                 "4,6,",
                 'list-oriented for.each')
   #+END_SRC

   no recursion; but that implementation probably belongs in lisp,
   doesn't it?
** TODO C implementation
   Map, apparently, is just a specialization of mapply with =SIMPLIFY =
   FALSE=:

   #+BEGIN_SRC R
   Map <-
   function(f, ...)
   mapply(f, ..., SIMPLIFY = FALSE)
   #+END_SRC

   we'll have to do Foreach ourselves, therefore. take a look at
   mapply?

   #+BEGIN_SRC R
     mapply <- function(FUN,..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
     {
       FUN <- match.fun(FUN)
       dots <- list(...)
     
       answer <- .Call("do_mapply", FUN, dots, MoreArgs, environment(),
                       PACKAGE = "base")
     
       if (USE.NAMES && length(dots)) {
         if (is.null(names1 <- names(dots[[1L]])) && is.character(dots[[1L]]))
           names(answer) <- dots[[1L]]
         else if (!is.null(names1))
           names(answer) <- names1
       }
       if (SIMPLIFY && length(answer) &&
           length(common.len <- unique(unlist(lapply(answer, length)))) == 1L) {
         if (common.len == 1L)
           unlist(answer, recursive = FALSE)
         else if (common.len > 1L)
           array(unlist(answer, recursive = FALSE),
                 dim = c(common.len, max(sapply(dots,length))),
                 dimnames = list(names(answer[[1L]]), names(answer)))
         else answer
       }
       else answer
     }
   #+END_SRC

   which is tough, of course, becase mapply is merely a wrapper around
   the c function =do_mapply=:

   #+BEGIN_SRC c
     /*
      *  R : A Computer Language for Statistical Data Analysis
      *  Copyright (C) 2003-7   The R Development Core Team
      *
      *  This program is free software; you can redistribute it and/or modify
      *  it under the terms of the GNU General Public License as published by
      *  the Free Software Foundation; either version 2 of the License, or
      *  (at your option) any later version.
      *
      *  This program is distributed in the hope that it will be useful,
      *  but WITHOUT ANY WARRANTY; without even the implied warranty of
      *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      *  GNU General Public License for more details.
      *
      *  You should have received a copy of the GNU General Public License
      *  along with this program; if not, a copy is available at
      *  http://www.r-project.org/Licenses/
      *
      */
     #ifdef HAVE_CONFIG_H
     # include <config.h>
     #endif
        
     #include <Defn.h>
        
        
     SEXP attribute_hidden
     do_mapply(SEXP f, SEXP varyingArgs, SEXP constantArgs, SEXP rho)
     {
        
       int i, j, m,nc, *lengths, *counters, named, longest=0;
       SEXP vnames, fcall = R_NilValue,  mindex, nindex, tmp1, tmp2, ans;
        
       m = length(varyingArgs);
       nc = length(constantArgs);
       vnames = PROTECT(getAttrib(varyingArgs, R_NamesSymbol));
        
       named = vnames!=R_NilValue;
        
       lengths = (int *)  R_alloc(m, sizeof(int));
       for(i = 0; i < m; i++){
         lengths[i] = length(VECTOR_ELT(varyingArgs,i));
         if (lengths[i] > longest) longest=lengths[i];
       }
        
        
       counters = (int *) R_alloc(m, sizeof(int));
       for(i = 0; i < m; counters[i++]=0);
        
       mindex=PROTECT(allocVector(VECSXP, m));
       nindex=PROTECT(allocVector(VECSXP, m));
        
       /* build a call
          f(dots[[1]][[4]],dots[[2]][[4]],dots[[3]][[4]],d=7)
       */
        
       if (constantArgs == R_NilValue)
         PROTECT(fcall=R_NilValue);
       else if(isVectorList(constantArgs))
         PROTECT(fcall=VectorToPairList(constantArgs));
       else
         error(_("argument 'MoreArgs' of 'mapply' is not a list"));
        
       for(j = m-1; j >= 0; j--) {
         SET_VECTOR_ELT(mindex, j, ScalarInteger(j+1));
         SET_VECTOR_ELT(nindex, j, allocVector(INTSXP, 1));
        
         PROTECT(tmp1=lang3(R_Bracket2Symbol,
                            install("dots"),
                            VECTOR_ELT(mindex, j)));
        
         PROTECT(tmp2=lang3(R_Bracket2Symbol,
                            tmp1,
                            VECTOR_ELT(nindex, j)));
        
        
         UNPROTECT(3);
         PROTECT(fcall=LCONS(tmp2, fcall));
        
         if (named && CHAR(STRING_ELT(vnames,j))[0]!='\0')
           SET_TAG(fcall, install(translateChar(STRING_ELT(vnames,j))));
        
       }
       UNPROTECT(1);
       PROTECT(fcall=LCONS(f, fcall));
        
       PROTECT(ans=allocVector(VECSXP, longest));
        
       for(i = 0; i < longest; i++) {
         for(j = 0; j < m; j++) {
           counters[j] = (++counters[j]>lengths[j]) ? 1 : counters[j];
           INTEGER(VECTOR_ELT(nindex,j))[0] = counters[j];
         }
         SET_VECTOR_ELT(ans, i, eval(fcall, rho));
       }
        
       for(j = 0; j < m; j++) {
         if (counters[j] != lengths[j])
           warning(_("longer argument not a multiple of length of shorter"));
       }
        
       UNPROTECT(5);
        
       return(ans);
     }
   #+END_SRC
